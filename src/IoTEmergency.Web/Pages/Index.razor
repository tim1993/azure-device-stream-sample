@page "/"
@using  IoTEmergency.Web.Data;
@using Microsoft.Azure.Devices.Shared
@inject IoTEmergencyRoomService EmergencyService;
@inject DeviceStreamProxyService ProxyService;
@inject IoTHubReceiverService ReceiverService;

<PageTitle>Index</PageTitle>

<img src="/img/header.jpg" />
<h1>IoT Emergency Room</h1>

<button disabled=@(selected is null || isLoading) @onclick="CauseTrouble">
    @(isLoading ? "Loading...": "Cause Trouble")
</button>

<button disabled=@(selected is null || isLoading) @onclick="ToggleConnection">
    @(ProxyService.IsRunning ? "Close SSH Connection": "Open SSH Connection")
</button>

<table>
    <thead>
        <tr>
            <td>Name</td>
            <td>Status</td>
        </tr>
    </thead>

@if (devices is not null)
{
    @foreach (var twin in devices)
    {
        <tr class="@RowClass(twin)" @onclick="() => selected = twin">
            <td>@twin.DeviceId</td>
            <td>@twin.ConnectionState</td>
        </tr>
    }
}
</table>

@if (selected is not null)
{
    <p>Selected device: @selected.DeviceId</p>
}

<ul>
@foreach (var joke in jokes.AsEnumerable().Reverse())
{
    <li>[@joke.Item1.ToLocalTime()] @joke.Item2</li>
}
</ul>
@code {
    Twin? selected;
    bool isLoading = false;


    List<(DateTimeOffset, string)> jokes = new();

    IEnumerable<Twin>? devices = null;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        devices = await EmergencyService.ListDevices().ToListAsync();
        ReceiverService.JokesReceived += HandleJokesUpdatedEvent;
    }

    private void Dispose()
    {
        ReceiverService.JokesReceived -= HandleJokesUpdatedEvent;
    }

    private async void HandleJokesUpdatedEvent(string receivedJokes)
    {
        await InvokeAsync(() => {
            Console.WriteLine("HandleJokesUpdatedEvent");
            jokes.Add((DateTime.UtcNow, receivedJokes));
            this.StateHasChanged();
        });
    }

    private async void ToggleConnection()
    {
        if (selected is not null)
        {
            try
            {
                await ProxyService.OpenLocalProxy(22, selected.DeviceId);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    private async void CauseTrouble()
    {
        if (selected is not null)
        {
            try
            {
                isLoading = true;
                var result = await EmergencyService.InvokeDiskflooding(selected.DeviceId);
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    private string RowClass(Twin twin) => twin == selected ? "selected" : string.Empty;
}